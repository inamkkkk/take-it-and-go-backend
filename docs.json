{
  "docs": [
    {
      "path": "package.json",
      "docs": "This file defines the metadata and dependencies for the 'takeitgo-backend' Node.js project. It serves as the entry point and configuration hub for the backend of the Take iT & Go peer-to-peer delivery platform.\n\n**Purpose:**\nTo manage project dependencies, define scripts for starting and developing the server, and provide essential metadata.\n\n**Responsibilities:**\n- Declares the project's name, version, and a descriptive overview.\n- Specifies the main entry file for the application ('server.js').\n- Defines scripts for common development tasks like starting the server ('start') and running in development mode with hot-reloading ('dev').\n- Lists all production and development dependencies required for the backend to function.\n\n**Key Functions/Sections:**\n- `name`: The identifier for the package.\n- `version`: The current version of the package.\n- `description`: A brief explanation of the project's purpose and features.\n- `main`: The primary JavaScript file to run when the package is executed.\n- `scripts`: Commands that can be executed using `npm` or `yarn`.\n  - `start`: Runs the application in production mode (`node server.js`).\n  - `dev`: Runs the application in development mode with `nodemon` for automatic restarts.\n  - `test`: Placeholder for test execution, currently indicates no tests are defined.\n- `dependencies`: Production dependencies needed for the application to run.\n  - `bcryptjs`: For password hashing.\n  - `cors`: To enable Cross-Origin Resource Sharing.\n  - `dotenv`: To load environment variables from a `.env` file.\n  - `express`: The web application framework for Node.js.\n  - `helmet`: For security middleware to set HTTP headers.\n  - `http-status-codes`: To provide standard HTTP status codes.\n  - `joi`: For object schema description and validation.\n  - `jsonwebtoken`: For creating and verifying JSON Web Tokens.\n  - `mongoose`: MongoDB object modeling tool.\n  - `socket.io`: Real-time, bidirectional event-based communication.\n  - `winston`: A flexible logger for Node.js.\n  - `xss-clean`: To sanitize user input to prevent XSS attacks.\n- `devDependencies`: Development dependencies used during the development lifecycle.\n  - `nodemon`: A utility that automatically restarts the server when file changes are detected.\n\n**TODOs:**\n- Implement actual tests in the `scripts.test` section instead of the placeholder message."
    },
    {
      "path": "server.js",
      "docs": "This file is the main entry point for the Node.js server. It sets up the HTTP server, connects to the database, initializes Socket.io for chat functionality, and handles various error and shutdown signals.\n\n**Purpose:**\n- Initialize and start the HTTP server.\n- Establish database connection.\n- Configure and integrate Socket.io for real-time chat.\n- Implement robust error handling and graceful shutdown mechanisms.\n\n**Responsibilities:**\n- Loading environment variables.\n- Creating an HTTP server instance using the Express application.\n- Connecting to the MongoDB database.\n- Setting up Socket.io communication.\n- Listening for incoming HTTP requests on a specified port.\n- Handling unhandled rejections and uncaught exceptions by logging errors and shutting down the server.\n- Responding to SIGTERM and SIGINT signals for graceful server termination.\n\n**Key Functions:**\n- `require('dotenv').config()`: Loads environment variables from a .env file.\n- `http.createServer(app)`: Creates an HTTP server that uses the provided Express app.\n- `connectDB()`: Initializes the connection to the MongoDB database.\n- `setupChatSocket(server)`: Sets up the Socket.io server attached to the HTTP server.\n- `server.listen(config.port, ...)`: Starts the HTTP server and makes it listen on the configured port.\n- `process.on('unhandledRejection', ...)`: Catches unhandled promise rejections.\n- `process.on('uncaughtException', ...)`: Catches synchronous errors that are not caught by try...catch blocks.\n- `process.on('SIGTERM', ...)` and `process.on('SIGINT', ...)`: Handles termination signals for graceful shutdown.\n\n**TODOs:**\n- Implement graceful shutdown for Socket.io connections (currently only the HTTP server is closed).\n- Ensure Socket.io connections are explicitly closed during SIGTERM and SIGINT signal handling."
    },
    {
      "path": "src/app.js",
      "docs": "This file sets up the main Express application. It initializes middleware for security, request parsing, logging, and rate limiting, and then defines the API routes and error handling. \n\n**Purpose:** \nTo configure and start the Express server, applying essential middleware and routing.\n\n**Responsibilities:**\n- Initialize the Express application.\n- Apply security middleware: Helmet, CORS, XSS sanitizer.\n- Configure request body parsing (JSON and URL-encoded).\n- Implement rate limiting to protect against abuse.\n- Integrate request logging (Morgan).\n- Mount all defined API routes.\n- Define a welcome route for the root path.\n- Implement a 404 Not Found handler.\n- Set up a global error handler.\n\n**Key Functions:**\n- `express()`: Initializes the Express application.\n- `app.use()`: Mounts middleware and routes.\n- `app.get()`: Defines a route handler for GET requests to the root path.\n\n**TODOs:**\n- Configure CORS more specifically if needed, e.g., allow only specific origins.\n- Implement rate limiting to protect against brute-force attacks (partially implemented, needs further review/configuration if specific strategies are required)."
    },
    {
      "path": "src/config/index.js",
      "docs": "This file handles application configuration by loading environment variables, validating them, and exporting a configuration object. It uses `dotenv` to load variables from a `.env` file and `Joi` for schema validation.\n\n**Purpose:**\n- To centralize and manage application configuration settings.\n- To ensure that required environment variables are present and have valid types.\n- To provide a structured way to access configuration values throughout the application.\n\n**Responsibilities:**\n- Loading environment variables from the `.env` file.\n- Defining a schema for expected environment variables using Joi.\n- Validating `process.env` against the defined schema.\n- Throwing an error if validation fails.\n- Exporting a well-structured configuration object with different sections (e.g., `env`, `port`, `mongoose`, `jwt`, `integrations`).\n\n**Key Functions/Features:**\n- `dotenv.config()`: Loads environment variables.\n- `Joi.object().keys({...})`: Defines the validation schema for environment variables, including types, required fields, defaults, and descriptions.\n- `envVarsSchema.prefs({ errors: { label: 'key' } }).validate(process.env)`: Validates the `process.env` object against the schema.\n- Error handling for validation failures.\n- Construction of the final configuration object, including logic for test environment specific MongoDB URL.\n\n**TODOs:**\n- Add validation for any new environment variables introduced in the future.\n- Add configuration for email integrations if they are implemented."
    },
    {
      "path": "src/config/db.js",
      "docs": {
        "purpose": "Handles the MongoDB database connection and disconnection for the application.",
        "responsibilities": [
          "Establishes a connection to the MongoDB database using Mongoose.",
          "Logs connection success or failure messages.",
          "Listens for and logs MongoDB disconnection events.",
          "Provides a function to gracefully disconnect from the MongoDB database."
        ],
        "key_functions": [
          {
            "name": "connectDB",
            "description": "Asynchronously connects to MongoDB using connection URL and options from the configuration. Logs the connection status and sets up an event listener for disconnections."
          },
          {
            "name": "disconnectDB",
            "description": "Asynchronously disconnects from the MongoDB database. Logs the disconnection status."
          }
        ],
        "todos": [
          "Implement graceful shutdown for the MongoDB connection.",
          "Consider using `mongoose.connection.on('disconnected', ...)` for logging.",
          "Refine error handling for connection failures, potentially implementing retry logic before exiting.",
          "Add a function to disconnect from MongoDB gracefully (this function already exists but might require further refinement or formalization)."
        ]
      }
    },
    {
      "path": "src/controllers/adminController.js",
      "docs": "This controller handles administrative functionalities, including user authentication, and retrieval of various system data like verifications, disputes, deliveries, and payment summaries. It uses JWT for admin authentication and relies on utility modules for API responses and logging.\n\n**Responsibilities:**\n- Authenticate admin users via email and password, returning a JWT upon successful login.\n- Provide endpoints to list and filter ID verification requests.\n- Provide endpoints to list and filter dispute records.\n- Provide endpoints to list and filter delivery/trip records.\n- Provide an aggregated overview of payment data, including summaries and filterable by date and status.\n\n**Key Functions:**\n- `login(req, res)`: Handles admin login, credential validation, and JWT generation.\n- `listVerifications(req, res)`: Retrieves and filters ID verification requests.\n- `listDisputes(req, res)`: Retrieves and filters dispute records.\n- `listDeliveries(req, res)`: Retrieves and filters delivery records.\n- `paymentsOverview(req, res)`: Aggregates and returns payment summary statistics.\n\n**TODOs:**\n- Load JWT secret key and token expiration time from environment variables.\n- Replace hardcoded admin user credentials and database lookups with actual implementations in the `login` function.\n- Implement actual database queries for `listVerifications`, `listDisputes`, `listDeliveries`, and `paymentsOverview` instead of using mock data.\n- Enhance filtering and pagination logic as per real-world requirements."
    },
    {
      "path": "src/controllers/authController.js",
      "docs": "This controller handles user authentication-related operations.\n\n**Responsibilities:**\n- User registration (signup)\n- User login (login)\n- Password reset initiation (forgotPassword)\n- Password reset execution (resetPassword)\n\n**Key Functions:**\n- `signup(req, res)`: Handles user registration. It calls `userService.createUser` to create the user and `authService.generateAuthTokens` to create authentication tokens. It returns the created user and tokens upon success.\n- `login(req, res)`: Handles user login. It calls `authService.loginUserWithEmailAndPassword` to authenticate the user and `authService.generateAuthTokens` to issue new tokens. It returns the authenticated user and tokens upon success.\n- `forgotPassword(req, res)`: Initiates the password reset process. It finds the user by email using `userService.getUserByEmail`, generates a reset token using `tokenService.generateResetPasswordToken`, and logs the event. It is intended to send an email with a reset link.\n- `resetPassword(req, res)`: Completes the password reset process. It verifies the reset token using `tokenService.verifyResetPasswordToken`, updates the user's password using `userService.updateUserById`, and invalidates the token using `tokenService.removeToken`. It returns a success message upon completion.\n\n**Error Handling:**\n- The controller catches errors and logs them using `logger.error`.\n- It checks if the error is an instance of `ApiError` to return a specific status code and error details; otherwise, it returns a generic error response.\n\n**TODOs:**\n- Implement email sending logic in `forgotPassword` for sending the password reset link.\n- Ensure `tokenService.removeToken` correctly handles token invalidation in `resetPassword`."
    },
    {
      "path": "src/controllers/chatController.js",
      "docs": "This file handles the real-time chat functionality using Socket.IO. It manages socket connections, authentication, message handling, user presence, and room management.\n\n**Purpose:** To provide a real-time chat experience between users.\n\n**Responsibilities:**\n- Establish and manage WebSocket connections.\n- Authenticate users connecting via Socket.IO.\n- Handle joining and leaving chat rooms.\n- Process and broadcast chat messages.\n- Implement typing indicators and read receipts.\n- Manage user presence (online/offline).\n- Log chat-related activities and errors.\n\n**Key Functions:**\n- `handleChat(socket, io)`: The main function that sets up event listeners for a new socket connection.\n  - **Authentication:** Verifies JWT token provided in the connection handshake query.\n  - **`joinRoom` event:** Allows users to join specific chat rooms (identified by `roomId`). It also fetches historical messages for that room.\n  - **`sendMessage` event:** Handles sending messages, saving them to the database via `chatService`, and broadcasting them to room participants.\n  - **`typing` / `stopTyping` events:** Broadcasts typing status to other users in the room.\n  - **`messageRead` event:** Handles marking messages as read (with a TODO for actual database update).\n  - **`disconnect` event:** Logs user disconnections.\n\n**TODOs:**\n- Initialize Notification service for offline messages.\n- Implement logic to verify if a user is allowed to join a specific room.\n- Implement sophisticated presence management (e.g., last seen).\n- Broadcast user offline status upon disconnection.\n- Update message status to 'read' in the database for `messageRead` event.\n- Refine the check for offline participants when sending notifications."
    },
    {
      "path": "src/controllers/disputeController.js",
      "docs": {
        "purpose": "Handles incoming requests related to disputes, including reporting new issues and retrieving existing ones. It interacts with the dispute service for business logic and uses API response utilities for consistent output.",
        "responsibilities": [
          "Validating input data for dispute-related operations using express-validator.",
          "Calling the appropriate dispute service methods to perform CRUD operations.",
          "Formatting success and error responses.",
          "Logging relevant information and errors."
        ],
        "key_functions": [
          {
            "name": "reportIssue",
            "description": "Handles the creation of a new dispute. It validates input, creates a dispute record via the service, and logs the action. TODOs exist for implementing notification logic.",
            "parameters": [
              "req: Express request object, expected to contain userId, tripId, type, description, and optional evidence in the body.",
              "res: Express response object."
            ],
            "returns": "A success response with the created dispute object or an error response."
          },
          {
            "name": "getDispute",
            "description": "Retrieves a specific dispute by its ID. It validates the ID, fetches the dispute from the service, and handles cases where the dispute is not found. TODOs exist for implementing authorization checks.",
            "parameters": [
              "req: Express request object, expected to contain the dispute ID in the URL parameters.",
              "res: Express response object."
            ],
            "returns": "A success response with the dispute object or an error response."
          }
        ],
        "todo_items": [
          "Implement logic to notify relevant parties (e.g., admin, involved users) when a new dispute is reported.",
          "Implement authorization logic to ensure only authorized users (e.g., involved user or admin) can view a specific dispute."
        ]
      }
    },
    {
      "path": "src/controllers/matchController.js",
      "docs": "## Match Controller\n\nThis controller handles requests related to finding matches between shippers and travelers for package delivery.\n\n### Purpose:\n\n- To facilitate the matching process by validating shipper requests and interacting with the `matchService` to find suitable travelers.\n\n### Responsibilities:\n\n- **Request Validation:** Validates incoming shipper requests using Joi schemas to ensure data integrity.\n- **Service Interaction:** Calls the `matchService` to perform the core matching logic.\n- **Response Formatting:** Formats successful responses with found matches or error responses for invalid requests or server errors.\n- **Logging:** Logs incoming requests, validation errors, successful matches, and server errors.\n\n### Key Functions:\n\n- **`findMatches(req, res)`:**\n    - **Purpose:** Finds potential traveler matches for a given shipper's delivery request.\n    - **Logic:**\n        1.  Validates the shipper's request payload (origin, destination, package details, desired delivery time) using the `findMatchesSchema`.\n        2.  If validation fails, returns a `BAD_REQUEST` response with the validation error message.\n        3.  If validation succeeds, it calls `matchService.findPotentialMatches()` with the validated request data.\n        4.  Responds with the list of found matches using a `successResponse` or an `INTERNAL_SERVER_ERROR` response if an error occurs during the matching process.\n    - **TODOs:**\n        - Define Joi schemas for request validation (partially done).\n        - Implement route-based matching logic within `matchService`.\n        - Integrate with Google Maps API for route calculations and spatial matching.\n        - Consider traveler's capacity, availability, and preferences.\n        - Apply business logic for optimal matching (e.g., shortest detour, best rating).\n        - Add other relevant package details to the validation schema (e.g., fragile, temperature-sensitive).\n        - Add fields for desired delivery time to the validation schema (partially done)."
    }
  ]
}