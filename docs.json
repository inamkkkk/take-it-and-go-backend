{
  "docs": [
    {
      "path": "package.json",
      "docs": "This file defines the metadata and dependencies for the 'takeitgo-backend' Node.js project. It serves as the entry point and configuration hub for the backend of the Take iT & Go peer-to-peer delivery platform.\n\n**Purpose:**\nTo manage project dependencies, define scripts for starting and developing the server, and provide essential metadata.\n\n**Responsibilities:**\n- Declares the project's name, version, and a descriptive overview.\n- Specifies the main entry file for the application ('server.js').\n- Defines scripts for common development tasks like starting the server ('start') and running in development mode with hot-reloading ('dev').\n- Lists all production and development dependencies required for the backend to function.\n\n**Key Functions/Sections:**\n- `name`: The identifier for the package.\n- `version`: The current version of the package.\n- `description`: A brief explanation of the project's purpose and features.\n- `main`: The primary JavaScript file to run when the package is executed.\n- `scripts`: Commands that can be executed using `npm` or `yarn`.\n  - `start`: Runs the application in production mode (`node server.js`).\n  - `dev`: Runs the application in development mode with `nodemon` for automatic restarts.\n  - `test`: Placeholder for test execution, currently indicates no tests are defined.\n- `dependencies`: Production dependencies needed for the application to run.\n  - `bcryptjs`: For password hashing.\n  - `cors`: To enable Cross-Origin Resource Sharing.\n  - `dotenv`: To load environment variables from a `.env` file.\n  - `express`: The web application framework for Node.js.\n  - `helmet`: For security middleware to set HTTP headers.\n  - `http-status-codes`: To provide standard HTTP status codes.\n  - `joi`: For object schema description and validation.\n  - `jsonwebtoken`: For creating and verifying JSON Web Tokens.\n  - `mongoose`: MongoDB object modeling tool.\n  - `socket.io`: Real-time, bidirectional event-based communication.\n  - `winston`: A flexible logger for Node.js.\n  - `xss-clean`: To sanitize user input to prevent XSS attacks.\n- `devDependencies`: Development dependencies used during the development lifecycle.\n  - `nodemon`: A utility that automatically restarts the server when file changes are detected.\n\n**TODOs:**\n- Implement actual tests in the `scripts.test` section instead of the placeholder message."
    },
    {
      "path": "server.js",
      "docs": "This file is the main entry point for the Node.js server. It sets up the HTTP server, connects to the database, initializes Socket.io for chat functionality, and handles various error and shutdown signals.\n\n**Purpose:**\n- Initialize and start the HTTP server.\n- Establish database connection.\n- Configure and integrate Socket.io for real-time chat.\n- Implement robust error handling and graceful shutdown mechanisms.\n\n**Responsibilities:**\n- Loading environment variables.\n- Creating an HTTP server instance using the Express application.\n- Connecting to the MongoDB database.\n- Setting up Socket.io communication.\n- Listening for incoming HTTP requests on a specified port.\n- Handling unhandled rejections and uncaught exceptions by logging errors and shutting down the server.\n- Responding to SIGTERM and SIGINT signals for graceful server termination.\n\n**Key Functions:**\n- `require('dotenv').config()`: Loads environment variables from a .env file.\n- `http.createServer(app)`: Creates an HTTP server that uses the provided Express app.\n- `connectDB()`: Initializes the connection to the MongoDB database.\n- `setupChatSocket(server)`: Sets up the Socket.io server attached to the HTTP server.\n- `server.listen(config.port, ...)`: Starts the HTTP server and makes it listen on the configured port.\n- `process.on('unhandledRejection', ...)`: Catches unhandled promise rejections.\n- `process.on('uncaughtException', ...)`: Catches synchronous errors that are not caught by try...catch blocks.\n- `process.on('SIGTERM', ...)` and `process.on('SIGINT', ...)`: Handles termination signals for graceful shutdown.\n\n**TODOs:**\n- Implement graceful shutdown for Socket.io connections (currently only the HTTP server is closed).\n- Ensure Socket.io connections are explicitly closed during SIGTERM and SIGINT signal handling."
    }
  ]
}